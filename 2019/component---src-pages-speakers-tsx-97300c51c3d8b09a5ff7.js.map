{"version":3,"sources":["webpack:///./src/pages/speakers.tsx","webpack:///./src/components/Title.tsx","webpack:///./src/components/ResponsiveBox.tsx","webpack:///./src/components/Breadcrumb.tsx","webpack:///./src/components/Speaker.tsx","webpack:///./src/components/SpeakerList.tsx"],"names":["SpeakersPage","data","_public_static_d_1251352131_json__WEBPACK_IMPORTED_MODULE_0__","t","useTranslation","speakers","allSpeakersYaml","edges","map","_ref","node","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_3__","_components_Seo__WEBPACK_IMPORTED_MODULE_4__","title","description","_components_ResponsiveBox__WEBPACK_IMPORTED_MODULE_7__","_components_Breadcrumb__WEBPACK_IMPORTED_MODULE_8__","path","_components_Title__WEBPACK_IMPORTED_MODULE_5__","_components_SpeakerList__WEBPACK_IMPORTED_MODULE_6__","__webpack_require__","d","__webpack_exports__","Title","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Box","styled","h1","withConfig","displayName","componentId","theme","fonts","header","props","children","ResponsiveBox","div","innerWidth","Breadcrumb","styled_components__WEBPACK_IMPORTED_MODULE_1__","react_i18next__WEBPACK_IMPORTED_MODULE_2__","gatsby__WEBPACK_IMPORTED_MODULE_3__","Text","span","to","label","key","h2","colors","border","_ref2","text","Name","p","_ref3","Speaker","name","photoURL","talkTitle","react_default","src","width","Container","breakpoints","mobile","SpeakerList","speaker","github","twitter"],"mappings":"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","file":"component---src-pages-speakers-tsx-97300c51c3d8b09a5ff7.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { Layout } from \"../components/Layout\"\nimport { SEO } from \"../components/Seo\"\nimport { Title } from \"../components/Title\"\nimport { SpeakerList } from \"../components/SpeakerList\"\nimport { ResponsiveBox } from \"../components/ResponsiveBox\"\nimport { Breadcrumb } from \"../components/Breadcrumb\"\n\nexport default function SpeakersPage() {\n  const data = useStaticQuery(graphql`\n    query Speakers {\n      allSpeakersYaml {\n        edges {\n          node {\n            featured\n            name\n            github\n            twitter\n            photoURL\n            talkTitle\n          }\n        }\n      }\n    }\n  `)\n  const { t } = useTranslation()\n  const speakers = data.allSpeakersYaml.edges.map(({ node }: any) => node)\n\n  return (\n    <Layout>\n      <SEO title={t(\"guestSpeakers\")} description={t(\"speakers.description\")} />\n      <ResponsiveBox>\n        <Breadcrumb path={[t(\"speakers\")]} />\n        <Title>{t(\"speakers\")}</Title>\n        <SpeakerList speakers={speakers} />\n      </ResponsiveBox>\n    </Layout>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  children: React.ReactNode\n}\n\nconst Box = styled.h1`\n  text-align: center;\n  margin: 40px 0 60px;\n  font-size: 40px;\n  text-transform: uppercase;\n  font-family: ${({ theme }) => theme.fonts.header};\n`\n\nexport function Title(props: Props) {\n  const { children } = props\n\n  return <Box>{children}</Box>\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  children: React.ReactNode\n}\n\nconst Box = styled.div`\n  width: 100%;\n  max-width: ${({ theme }) => theme.innerWidth};\n  padding: 2em 1em 5em;\n  margin: 0 auto;\n  box-sizing: border-box;\n`\n\nexport function ResponsiveBox(props: Props) {\n  const { children } = props\n\n  return <Box>{children}</Box>\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport { Link } from \"gatsby\"\n\nexport type Props = {\n  path: string[]\n}\n\nconst Box = styled.div`\n  display: flex;\n`\nconst Text = styled.span`\n  margin-right: 0.5em;\n  font-size: 14px;\n  font-weight: bold;\n  text-transform: uppercase;\n  font-family: ${({ theme }) => theme.fonts.header};\n  text-transform: uppercase;\n`\n\nexport function Breadcrumb(props: Props) {\n  const { path } = props\n  const { t } = useTranslation()\n\n  return (\n    <Box>\n      <Link to=\"/\">\n        <Text>{t(\"top\")}</Text>\n      </Link>\n      <Text>></Text>\n      {path.map(label => (\n        <Text key={label}>{label}</Text>\n      ))}\n    </Box>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  name: string\n  photoURL: string\n  talkTitle: string\n  github: string\n  twitter: string\n}\n\nconst Title = styled.h2`\n  margin: 0;\n  padding: 10px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.text};\n  font-size: 20px;\n`\nconst Name = styled.p`\n  margin-bottom: 0;\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.text};\n  font-size: 16px;\n`\n\nexport function Speaker(props: Props) {\n  const { name, photoURL, talkTitle } = props\n\n  return (\n    <div>\n      <img src={photoURL} width=\"100%\" />\n      <Title>{talkTitle}</Title>\n      <Name>{name}</Name>\n    </div>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Speaker, Props as SpeakerType } from \"./Speaker\"\n\nexport type Props = {\n  speakers: SpeakerType[]\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-column-gap: 60px;\n  grid-row-gap: 60px;\n\n  ${({ theme }) => theme.breakpoints.mobile} {\n    grid-template-columns: repeat(2, 1fr);\n    grid-column-gap: 20px;\n    grid-row-gap: 20px;\n  }\n`\n\nexport function SpeakerList(props: Props) {\n  const { speakers } = props\n\n  return (\n    <Container>\n      {speakers.map(speaker => (\n        <Speaker\n          key={speaker.name}\n          name={speaker.name}\n          photoURL={speaker.photoURL}\n          talkTitle={speaker.talkTitle}\n          github={speaker.github}\n          twitter={speaker.twitter}\n        />\n      ))}\n    </Container>\n  )\n}\n"],"sourceRoot":""}